--- a/src/GMock/GMockConfig.cmake
+++ b/src/GMock/GMockConfig.cmake
@@ -25,32 +25,91 @@
 #   ${GTEST_BOTH_LIBRARIES}
 # )
 #
+# This also provides the following variables, with the version of the found gtest.
+# These are both set as c/c++ definitions and cmake varables
+#
+# GTEST_VERSION_MAJOR
+# GTEST_VERSION_MINOR
+# GTEST_VERSION_PATCH
+#
+# and required starting with 1.10:
+# GOOGLETEST_VERSION
+#
 # NOTE: Due to the way this package finder is implemented, do not attempt
 # to find the GMock package more than once.
 
 find_package(Threads)
+find_package(PkgConfig)
 
 if (EXISTS "/usr/src/googletest")
-    # As of version 1.8.0
+    # at least version 1.8.0
+    set(GTEST_VERSION_STR "1.8.0")
     set(GMOCK_SOURCE_DIR "/usr/src/googletest/googlemock" CACHE PATH "gmock source directory")
     set(GMOCK_INCLUDE_DIRS "${GMOCK_SOURCE_DIR}/include" CACHE PATH "gmock source include directory")
     set(GTEST_INCLUDE_DIRS "/usr/src/googletest/googletest/include" CACHE PATH "gtest source include directory")
 else()
+    # fallback
     set(GMOCK_SOURCE_DIR "/usr/src/gmock" CACHE PATH "gmock source directory")
     set(GMOCK_INCLUDE_DIRS "/usr/include" CACHE PATH "gmock source include directory")
     set(GTEST_INCLUDE_DIRS "/usr/include" CACHE PATH "gtest source include directory")
+    set(GTEST_VERSION_STR "1.7.0")
+endif()
+message("-- Using ${GMOCK_SOURCE_DIR}/ as gmock source directory")
+
+# get a gtest version string that the regex will match
+pkg_check_modules(GTEST "gtest")
+if (GTEST_FOUND)
+  set(GTEST_VERSION_STR ${GTEST_VERSION})
+  set(GTEST_DETECTION_METHOD "pkg-config")
+elseif (DEFINED ENV{GTEST_VERSION})
+  set(GTEST_VERSION_STR $ENV{GTEST_VERSION})
+  set(GTEST_DETECTION_METHOD "GTEST_VERSION environment variable")
+else()
+  message(WARNING "Could not detect GTest version, Assuming v${GTEST_VERSION_STR} (or compatible) and hoping for the best")
+  add_definitions(-DGTEST_VERSION_UNKNOWN)
+  set(GTEST_DETECTION_METHOD "best guess, could not detect")
+endif()
+
+string(REGEX MATCH
+  "([0-9]+)\\.([0-9]+)\\.([0-9]+)" GTEST_VERSION_PARSED
+  ${GTEST_VERSION_STR})
+if (GTEST_VERSION_PARSED)
+  set(GTEST_VERSION_MAJOR ${CMAKE_MATCH_1})
+  set(GTEST_VERSION_MINOR ${CMAKE_MATCH_2})
+  set(GTEST_VERSION_PATCH ${CMAKE_MATCH_3})
+  message("-- Using GTest v${GTEST_VERSION_MAJOR}.${GTEST_VERSION_MINOR}.${GTEST_VERSION_PATCH} (parsed from ${GTEST_DETECTION_METHOD})")
+else()
+  # fallback to 1.8.0
+  message(WARNING "Could not parse GTest version: ${GTEST_VERSION_STR} (${GTEST_DETECTION_METHOD}), Assuming v1.8.0 (or compatible) and hoping for the best")
+  set(GTEST_VERSION_MAJOR 1)
+  set(GTEST_VERSION_MINOR 8)
+  set(GTEST_VERSION_PATCH 0)
+  add_definitions(-DGTEST_VERSION_UNKNOWN)
 endif()
 
+add_definitions(-DGTEST_VERSION_MAJOR=${GTEST_VERSION_MAJOR})
+add_definitions(-DGTEST_VERSION_MINOR=${GTEST_VERSION_MINOR})
+add_definitions(-DGTEST_VERSION_PATCH=${GTEST_VERSION_PATCH})
+
 # We add -g so we get debug info for the gtest stack frames with gdb.
 # The warnings are suppressed so we get a noise-free build for gtest and gmock if the caller
 # has these warnings enabled.
 set(findgmock_cxx_flags "${CMAKE_CXX_FLAGS} -g -Wno-old-style-cast -Wno-missing-field-initializers -Wno-ctor-dtor-privacy -Wno-switch-default")
 
 set(findgmock_bin_dir "${CMAKE_CURRENT_BINARY_DIR}/gmock")
-set(findgmock_gtest_lib "${findgmock_bin_dir}/lib/libgtest.a")
-set(findgmock_gtest_main_lib "${findgmock_bin_dir}/lib/libgtest_main.a")
-set(findgmock_gmock_lib "${findgmock_bin_dir}/lib/libgmock.a")
-set(findgmock_gmock_main_lib "${findgmock_bin_dir}/lib/libgmock_main.a")
+
+if ("${GTEST_VERSION_MAJOR}.${GTEST_VERSION_MINOR}.${GTEST_VERSION_PATCH}" VERSION_LESS "1.8.1")
+    set(findgmock_gtest_libdir "${findgmock_bin_dir}/gtest")
+    set(findgmock_gmock_libdir "${findgmock_bin_dir}")
+else()
+    set(findgmock_gtest_libdir "${findgmock_bin_dir}/lib")
+    set(findgmock_gmock_libdir "${findgmock_bin_dir}/lib")
+endif()
+
+set(findgmock_gtest_lib "${findgmock_gtest_libdir}/libgtest.a")
+set(findgmock_gtest_main_lib "${findgmock_gtest_libdir}/libgtest_main.a")
+set(findgmock_gmock_lib "${findgmock_gmock_libdir}/libgmock.a")
+set(findgmock_gmock_main_lib "${findgmock_gmock_libdir}/libgmock_main.a")
 
 include(ExternalProject)
 ExternalProject_Add(GMock SOURCE_DIR "${GMOCK_SOURCE_DIR}"
